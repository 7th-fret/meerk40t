# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 0.9.3 on Thu Jun 27 16:34:06 2019
#
from math import ceil

import wx

# begin wxGlade: dependencies
# end wxGlade
from ZMatrix import ZMatrix


# begin wxGlade: extracode


class LaserSceneView(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainView.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.matrix = ZMatrix()
        self.identity = ZMatrix()
        self.matrix.Reset()
        self.identity.Reset()
        self.previous_window_position = None
        self.previous_scene_position = None
        self._Buffer = None

        self.__set_properties()
        self.__do_layout()
        self.overlay = wx.Overlay()
        self.selection_rect = None
        self.draw_grid = True
        self.draw_guides = True
        self.grid = None
        self.draw_laserhead = True

        self.Bind(wx.EVT_PAINT, self.on_paint)
        self.Bind(wx.EVT_SIZE, self.on_size)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.on_erase)

        self.Bind(wx.EVT_MOTION, self.on_mouse_move)
        self.move_function = self.move_pan
        self.Bind(wx.EVT_MOUSEWHEEL, self.on_mousewheel)
        self.Bind(wx.EVT_MIDDLE_DOWN, self.on_mouse_middle_down)
        self.Bind(wx.EVT_MIDDLE_UP, self.on_mouse_middle_up)

        # self.Bind(wx.EVT_RIGHT_DOWN, self.on_right_mouse_down)
        self.Bind(wx.EVT_LEFT_DOWN, self.on_left_mouse_down)
        self.Bind(wx.EVT_LEFT_UP, self.on_left_mouse_up)

    def set_project(self, project):
        self.project = project
        bedwidth, bedheight = project.size
        self.focus_viewport_scene((0, 0, bedwidth * 25.4, bedheight * 25.4), 0.1)
        self.project.writer.position_listener = self.update_position

    def __set_properties(self):
        # begin wxGlade: MainView.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainView.__do_layout
        self.Layout()
        # end wxGlade

    def on_paint(self, event):
        wx.BufferedPaintDC(self, self._Buffer)

    def update_position(self, x, y):
        self.update_buffer()

    def on_size(self, event):
        Size = self.ClientSize
        self._Buffer = wx.Bitmap(*Size)
        self.guide_lines = None
        bedwidth, bedheight = self.project.size
        self.focus_viewport_scene((0, 0, bedwidth * 25.4, bedheight * 25.4), 0.1)
        self.update_buffer()

    def on_erase(self, event):
        pass

    def update_buffer(self):
        dc = wx.MemoryDC()
        dc.SelectObject(self._Buffer)
        self.on_draw_background(dc)
        dc.SetTransformMatrix(self.matrix)
        self.on_draw_scene(dc)
        dc.SetTransformMatrix(self.identity)
        self.on_draw_interface(dc)
        del dc  # need to get rid of the MemoryDC before Update() is called.
        self.Refresh()
        self.Update()

    def on_matrix_change(self):
        self.guide_lines = None

    def scene_matrix_reset(self):
        self.matrix.Reset()
        self.on_matrix_change()

    def scene_post_scale(self, sx, sy=None, ax=0, ay=0):
        self.matrix.PostScale(sx, sy, ax, ay)
        self.on_matrix_change()

    def scene_post_pan(self, px, py):
        self.matrix.PostTranslate(px, py)
        self.on_matrix_change()

    def scene_post_rotate(self, angle, rx=0, ry=0):
        self.matrix.PostRotate(angle, rx, ry)
        self.on_matrix_change()

    def scene_pre_scale(self, sx, sy=None, ax=0, ay=0):
        self.matrix.PreScale(sx, sy, ax, ay)
        self.on_matrix_change()

    def scene_pre_pan(self, px, py):
        self.matrix.PreTranslate(px, py)
        self.on_matrix_change()

    def scene_pre_rotate(self, angle, rx=0, ry=0):
        self.matrix.PreRotate(angle, rx, ry)
        self.on_matrix_change()

    def get_scale_x(self):
        return self.matrix.GetScaleX()

    def get_scale_y(self):
        return self.matrix.GetScaleY()

    def get_skew_x(self):
        return self.matrix.GetSkewX()

    def get_skew_y(self):
        return self.matrix.GetSkewY()

    def get_translate_x(self):
        return self.matrix.GetTranslateX()

    def get_translate_y(self):
        return self.matrix.GetTranslateY()

    def on_mousewheel(self, event):
        rotation = event.GetWheelRotation()
        mouse = event.GetPosition()
        if rotation > 1:
            self.scene_post_scale(1.1, 1.1, mouse[0], mouse[1])
        elif rotation < -1:
            self.scene_post_scale(0.9, 0.9, mouse[0], mouse[1])
        self.update_buffer()

    def on_mouse_middle_down(self, event):
        self.CaptureMouse()
        self.previous_window_position = event.GetPosition()
        self.previous_scene_position = self.convert_window_to_scene(self.previous_window_position)

    def on_mouse_middle_up(self, event):
        if self.HasCapture():
            self.ReleaseMouse()
        self.previous_window_position = None
        self.previous_scene_position = None

    def on_left_mouse_down(self, event):
        self.CaptureMouse()
        self.previous_window_position = event.GetPosition()
        self.previous_scene_position = self.convert_window_to_scene(self.previous_window_position)
        self.project.select(self.previous_scene_position)
        self.move_function = self.move_selected

    def on_left_mouse_up(self, event):
        if self.HasCapture():
            self.ReleaseMouse()
        self.previous_window_position = None
        self.previous_scene_position = None
        self.move_function = self.move_pan

    def move_pan(self,wdx,wdy,sdx,sdy):
        self.scene_post_pan(wdx, wdy)
        self.update_buffer()

    def move_selected(self,wdx,wdy,sdx,sdy):
        self.project.move_selected(sdx, sdy)
        self.update_buffer()

    def on_mouse_move(self, event):
        if not event.Dragging():
            return
        if self.previous_window_position is None:
            return
        pos = event.GetPosition()
        window_position = pos.x, pos.y
        scene_position = self.convert_window_to_scene([window_position[0], window_position[1]])
        sdx = (scene_position[0] - self.previous_scene_position[0])
        sdy = (scene_position[1] - self.previous_scene_position[1])
        wdx = (window_position[0] - self.previous_window_position[0])
        wdy = (window_position[1] - self.previous_window_position[1])
        self.move_function(wdx, wdy, sdx, sdy)
        self.previous_window_position = window_position
        self.previous_scene_position = scene_position

    def on_right_mouse_down(self, event):
        menu = wx.Menu()
        menu_item = menu.Append(wx.ID_ANY, "Track", "", wx.ITEM_CHECK)
        # self.Bind(wx.EVT_MENU, self.on_click_new, menu_item)
        self.PopupMenu(menu)
        menu.Destroy()

    def focus_position_scene(self, scene_point):
        window_width, window_height = self.ClientSize
        scale_x = self.get_scale_x()
        scale_y = self.get_scale_y()
        self.scene_matrix_reset()
        self.scene_post_pan(-scene_point[0], -scene_point[1])
        self.scene_post_scale(scale_x, scale_y)
        self.scene_post_pan(window_width / 2.0, window_height / 2.0)

    def focus_viewport_scene(self, new_scene_viewport, buffer=0.0, lock=True):
        window_width, window_height = self.ClientSize
        left = new_scene_viewport[0]
        top = new_scene_viewport[1]
        right = new_scene_viewport[2]
        bottom = new_scene_viewport[3]
        viewport_width = right - left
        viewport_height = bottom - top

        left -= viewport_width * buffer
        right += viewport_width * buffer
        top -= viewport_height * buffer
        bottom += viewport_height * buffer

        if right == left:
            scale_x = 100
        else:
            scale_x = window_width / float(right - left)
        if bottom == top:
            scale_y = 100
        else:
            scale_y = window_height / float(bottom - top)

        cx = ((right + left) / 2)
        cy = ((top + bottom) / 2)
        self.matrix.Reset()
        self.matrix.PostTranslate(-cx, -cy)
        if lock:
            scale = min(scale_x, scale_y)
            if scale != 0:
                self.matrix.PostScale(scale)
        else:
            if scale_x != 0 and scale_y != 0:
                self.matrix.PostScale(scale_x, scale_y)
        self.matrix.PostTranslate(window_width / 2.0, window_height / 2.0)

    def convert_scene_to_window(self, position):
        return self.matrix.TransformPoint([position[0], position[1]])

    def convert_window_to_scene(self, position):
        return self.matrix.InverseTransformPoint([position[0], position[1]])

    def calculate_grid(self):
        lines = []
        bedwidth, bedheight = self.project.size
        wmils = ceil(bedwidth * 25.4)
        hmils = ceil(bedheight * 25.4)
        for y in range(0, int(hmils), 254):
            lines.append((0, y, wmils, y))
        for x in range(0, int(wmils), 254):
            lines.append((x, 0, x, hmils))
        self.grid = lines

    def on_draw_grid(self, dc):
        if self.grid is None:
            self.calculate_grid()
        dc.DrawLineList(self.grid)

    def on_draw_guides(self, dc):
        lines = []
        w, h = self.Size
        wpoints = int(ceil(w / 15.0))
        hpoints = int(ceil(h / 15.0))
        points = min(wpoints, hpoints)
        sx, sy = self.convert_scene_to_window([0, 0])
        offset_x = sx % points
        offset_y = sy % points

        for x in range(int(offset_x), int(w), points):
            length = 50
            lines.append((x, 0, x, length))
            lines.append((x, h, x, h - length))
            dc.DrawRotatedText("%1d" % ((x-sx) / (25.4 * self.matrix.GetScaleX())),x,0,-90)

        for y in range(int(offset_y), int(h), points):
            length = 50
            lines.append((0, y, length, y))
            lines.append((w, y, w - length, y))
            dc.DrawText("%1d" % ((y-sy) / (25.4 * self.matrix.GetScaleY())), 0, y)
        dc.DrawLineList(lines)

    def on_draw_background(self, dc):
        dc.SetBackground(wx.Brush("Grey"))
        dc.Clear()

    def on_draw_interface(self, dc):
        pen = wx.Pen(wx.BLACK)
        pen.SetWidth(1)
        pen.SetCap(wx.CAP_BUTT)
        if self.draw_guides:
            self.on_draw_guides(dc)

    def on_draw_scene(self, dc):
        if self.draw_grid:
            bedwidth, bedheight = self.project.size
            wmils = ceil(bedwidth * 25.4)
            hmils = ceil(bedheight * 25.4)
            dc.SetPen(wx.WHITE_PEN)
            dc.DrawRectangle(0, 0, wmils, hmils)
            dc.SetPen(wx.BLACK_PEN)
            self.on_draw_grid(dc)
        if self.draw_laserhead:
            dc.SetPen(wx.RED_PEN)
            x = self.project.writer.current_x
            y = self.project.writer.current_y
            dc.DrawCircle(x, y, 10)
        pen = wx.Pen(wx.BLACK)
        pen.SetWidth(1)
        pen.SetCap(wx.CAP_BUTT)
        dc.SetPen(pen)
        if self.project is None:
            return
        for element in self.project.elements:
            element.draw(dc)

# end of class MainView
