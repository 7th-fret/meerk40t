#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Wed Jul 22 19:31:45 2020
#

import wx

from Kernel import Module
from icons import icons8_gas_industry_50
from svgelements import SVGImage

_ = wx.GetTranslation


class RasterWizard(wx.Frame, Module):
    def __init__(self, *args, **kwds):
        # begin wxGlade: RasterWizard.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL
        wx.Frame.__init__(self, *args, **kwds)
        Module.__init__(self)
        self.SetSize((605, 636))
        self.list_operation = wx.ListBox(self, wx.ID_ANY,
                                         choices=[_("Crop"), _("Resample"), _("Grayscale"), _("Tone"), _("Gamma"),
                                                  _("Sharpen"), _("Dither"), _("Output")])
        self.crop_panel = wx.Panel(self, wx.ID_ANY)
        self.check_enable_crop = wx.CheckBox(self.crop_panel, wx.ID_ANY, _("Enable"))
        self.button_reset_crop = wx.Button(self.crop_panel, wx.ID_ANY, _("Reset"))
        self.image_view_panel = wx.Panel(self.crop_panel, wx.ID_ANY)
        self.resample_panel = wx.Panel(self, wx.ID_ANY)
        self.check_enable_resample = wx.CheckBox(self.resample_panel, wx.ID_ANY, _("Enable"))
        self.check_resample_maintain_aspect = wx.CheckBox(self.resample_panel, wx.ID_ANY, _("Maintain Aspect Ratio"))
        self.text_resample_width = wx.TextCtrl(self.resample_panel, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.spin_resample_width = wx.SpinCtrl(self.resample_panel, wx.ID_ANY, "1000", min=0, max=100000)
        self.text_resample_height = wx.TextCtrl(self.resample_panel, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.spin_resample_height = wx.SpinCtrl(self.resample_panel, wx.ID_ANY, "1000", min=0, max=100000)
        self.combo_resample_step = wx.ComboBox(self.resample_panel, wx.ID_ANY,
                                               choices=["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
                                               style=wx.CB_DROPDOWN)
        self.combo_resample_dpi = wx.ComboBox(self.resample_panel, wx.ID_ANY,
                                              choices=["1000", "500", "333", "250", "200", "167", "143", "125", "111",
                                                       "100"], style=wx.CB_DROPDOWN)
        self.grayscale_panel = wx.Panel(self, wx.ID_ANY)
        self.check_enable_grayscale = wx.CheckBox(self.grayscale_panel, wx.ID_ANY, _("Enable"))
        self.tone_curve_panel = wx.Panel(self, wx.ID_ANY)
        self.check_enable_tone = wx.CheckBox(self.tone_curve_panel, wx.ID_ANY, _("Enable"))
        self.button_reset_tone = wx.Button(self.tone_curve_panel, wx.ID_ANY, _("Reset"))
        self.curve_panel = wx.Panel(self.tone_curve_panel, wx.ID_ANY)
        self.gamma_panel = wx.Panel(self, wx.ID_ANY)
        self.check_enable_gamma = wx.CheckBox(self.gamma_panel, wx.ID_ANY, _("Enable"))
        self.button_reset_gamma = wx.Button(self.gamma_panel, wx.ID_ANY, _("Reset"))
        self.slider_gamma_factor = wx.Slider(self.gamma_panel, wx.ID_ANY, 108, 0, 200,
                                             style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL)
        self.text_gamma_factor = wx.TextCtrl(self.gamma_panel, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.sharpen_panel = wx.Panel(self, wx.ID_ANY)
        self.check_enable_sharpen = wx.CheckBox(self.sharpen_panel, wx.ID_ANY, _("Enable"))
        self.button_reset_sharpen = wx.Button(self.sharpen_panel, wx.ID_ANY, _("Reset"))
        self.slider_sharpen_percent = wx.Slider(self.sharpen_panel, wx.ID_ANY, 108, 0, 200,
                                                style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL)
        self.text_sharpen_percent = wx.TextCtrl(self.sharpen_panel, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.slider_sharpen_radius = wx.Slider(self.sharpen_panel, wx.ID_ANY, 108, 0, 200,
                                               style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL)
        self.text_sharpen_radius = wx.TextCtrl(self.sharpen_panel, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.slider_sharpen_threshold = wx.Slider(self.sharpen_panel, wx.ID_ANY, 108, 0, 200,
                                                  style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL)
        self.text_sharpen_threshold = wx.TextCtrl(self.sharpen_panel, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.dither_panel = wx.Panel(self, wx.ID_ANY)
        self.check_enable_dither = wx.CheckBox(self.dither_panel, wx.ID_ANY, _("Enable"))
        self.combo_dither = wx.ComboBox(self.dither_panel, wx.ID_ANY,
                                        choices=[_("Floyd-Steinberg"), _("Jarvis, Judice, Ninke"), _("Stucki"),
                                                 _("Atkinson"), _("Burkes"), _("Sierra"), _("Ordered 4x4"),
                                                 _("Ordered 8x8")], style=wx.CB_DROPDOWN)
        self.output_panel = wx.Panel(self, wx.ID_ANY)
        self.button_output = wx.Button(self.output_panel, wx.ID_ANY, _("Update Image"))
        self.panel_preview = wx.Panel(self, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.on_list_operation, self.list_operation)
        self.Bind(wx.EVT_CHECKBOX, self.on_check_enable_crop, self.check_enable_crop)
        self.Bind(wx.EVT_BUTTON, self.on_button_reset_crop, self.button_reset_crop)
        self.Bind(wx.EVT_CHECKBOX, self.on_check_enable_resample, self.check_enable_resample)
        self.Bind(wx.EVT_CHECKBOX, self.on_check_resample_maintain_aspect, self.check_resample_maintain_aspect)
        self.Bind(wx.EVT_TEXT, self.on_text_resample_width, self.text_resample_width)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_text_resample_width, self.text_resample_width)
        self.Bind(wx.EVT_SPINCTRL, self.on_spin_resample_width, self.spin_resample_width)
        self.Bind(wx.EVT_TEXT, self.on_spin_resample_width, self.spin_resample_width)
        self.Bind(wx.EVT_TEXT, self.on_text_resample_height, self.text_resample_height)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_text_resample_height, self.text_resample_height)
        self.Bind(wx.EVT_SPINCTRL, self.on_spin_resample_height, self.spin_resample_height)
        self.Bind(wx.EVT_TEXT, self.on_spin_resample_height, self.spin_resample_height)
        self.Bind(wx.EVT_CHECKBOX, self.on_check_enable_grayscale, self.check_enable_grayscale)
        self.Bind(wx.EVT_CHECKBOX, self.on_check_enable_tone, self.check_enable_tone)
        self.Bind(wx.EVT_BUTTON, self.on_button_reset_tone, self.button_reset_tone)
        self.Bind(wx.EVT_CHECKBOX, self.on_check_enable_gamma, self.check_enable_gamma)
        self.Bind(wx.EVT_BUTTON, self.on_button_reset_gamma, self.button_reset_gamma)
        self.Bind(wx.EVT_CHECKBOX, self.on_check_enable_sharpen, self.check_enable_sharpen)
        self.Bind(wx.EVT_BUTTON, self.on_button_reset_sharpen, self.button_reset_sharpen)
        self.Bind(wx.EVT_CHECKBOX, self.on_check_enable_dither, self.check_enable_dither)
        self.Bind(wx.EVT_BUTTON, self.on_button_update, self.button_output)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.on_close, self)

        self.image = None

    def on_close(self, event):
        if self.state == 5:
            event.Veto()
        else:
            self.state = 5
            self.device.close('window', self.name)
            event.Skip()  # Call destroy as regular.

    def initialize(self, channel=None):
        self.device.close('window', self.name)
        self.Show()
        for e in self.device.device_root.elements.elems(emphasized=True):
            if isinstance(e, SVGImage):
                self.image = e
                break
        if self.image is None:
            for attr in dir(self):
                value = getattr(self, attr)
                if isinstance(value, wx.Control):
                    value.Enable(False)
            dlg = wx.MessageDialog(None, _(
                "Selected Image Not Found."),
                                   _("Window requires a working image."), wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()

    def finalize(self, channel=None):
        try:
            self.Close()
        except RuntimeError:
            pass

    def shutdown(self, channel=None):
        try:
            self.Close()
        except RuntimeError:
            pass

    def __set_properties(self):
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(icons8_gas_industry_50.GetBitmap())
        self.SetIcon(_icon)
        # begin wxGlade: RasterWizard.__set_properties
        self.SetTitle(_("Raster Wizard"))
        self.list_operation.SetToolTip(_("Image operations applied in order to generate a raster image."))
        self.check_enable_crop.SetToolTip(_("Enable Cropping"))
        self.check_enable_crop.SetValue(1)
        self.button_reset_crop.SetToolTip(_("Reset Cropping"))
        self.image_view_panel.SetToolTip(_("Crop field"))
        self.image_view_panel.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.check_enable_resample.SetToolTip(_("Enable Resampling"))
        self.check_enable_resample.SetValue(1)
        self.check_resample_maintain_aspect.SetToolTip(_("Maintain Aspect Ratio for Resample"))
        self.check_resample_maintain_aspect.SetValue(1)
        self.text_resample_width.SetToolTip(_("Image Width"))
        self.spin_resample_width.SetToolTip(_("Resampled Width"))
        self.text_resample_height.SetToolTip(_("Image Height"))
        self.spin_resample_height.SetToolTip(_("Resampled Height"))
        self.combo_resample_step.SetToolTip(_("Image resample step"))
        self.combo_resample_step.SetSelection(1)
        self.combo_resample_dpi.SetToolTip(_("Image resample DPI at given step"))
        self.combo_resample_dpi.SetSelection(1)
        self.check_enable_grayscale.SetToolTip(_("Enable Grayscale Convert"))
        self.check_enable_grayscale.SetValue(1)
        self.check_enable_tone.SetToolTip(_("Enable Tone Curve"))
        self.check_enable_tone.SetValue(1)
        self.button_reset_tone.SetToolTip(_("Reset Tone Curve"))
        self.curve_panel.SetMinSize((300, 300))
        self.curve_panel.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.check_enable_gamma.SetToolTip(_("Enable Gamma Shift"))
        self.check_enable_gamma.SetValue(1)
        self.button_reset_gamma.SetToolTip(_("Reset Gamma Shift"))
        self.slider_gamma_factor.SetToolTip(_("Gamma factor slider"))
        self.text_gamma_factor.SetToolTip(_("Amount of gamma factor"))
        self.check_enable_sharpen.SetToolTip(_("Enable Sharpen"))
        self.check_enable_sharpen.SetValue(1)
        self.button_reset_sharpen.SetToolTip(_("Sharpen Reset"))
        self.slider_sharpen_percent.SetToolTip(_("Strength of sharpening in percent"))
        self.text_sharpen_percent.SetToolTip(_("amount of sharpening in %"))
        self.slider_sharpen_radius.SetToolTip(_("Blur radius for the sharpening operation"))
        self.text_sharpen_radius.SetToolTip(_("Sharpen radius amount"))
        self.slider_sharpen_threshold.SetToolTip(
            _("Threshold controls the minimum brighteness change to be sharpened."))
        self.text_sharpen_threshold.SetToolTip(_("Shapen Threshold Amount"))
        self.check_enable_dither.SetToolTip(_("Enable Dither"))
        self.check_enable_dither.SetValue(1)
        self.combo_dither.SetToolTip(_("Select dither algorithm to use"))
        self.combo_dither.SetSelection(0)
        self.button_output.SetToolTip(_("Process Image and Export"))
        self.panel_preview.SetToolTip(_("Processed image preview"))
        self.list_operation.SetSelection(0)
        self.hide_by_list_op()

    def hide_by_list_op(self):
        self.crop_panel.Hide()
        self.resample_panel.Hide()
        self.grayscale_panel.Hide()
        self.tone_curve_panel.Hide()
        self.gamma_panel.Hide()
        self.sharpen_panel.Hide()
        self.dither_panel.Hide()
        self.output_panel.Hide()
        select = self.list_operation.GetSelection()
        if select == 0:
            self.crop_panel.Show()
        elif select == 1:
            self.resample_panel.Show()
        elif select == 2:
            self.grayscale_panel.Show()
        elif select == 3:
            self.tone_curve_panel.Show()
        elif select == 4:
            self.gamma_panel.Show()
        elif select == 5:
            self.sharpen_panel.Show()
        elif select == 6:
            self.dither_panel.Show()
        elif select == 7:
            self.output_panel.Show()
        self.Layout()

    def __do_layout(self):
        # begin wxGlade: RasterWizard.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_operation_panels = wx.BoxSizer(wx.VERTICAL)
        sizer_output = wx.StaticBoxSizer(wx.StaticBox(self.output_panel, wx.ID_ANY, _("Output")), wx.VERTICAL)
        sizer_dither_main = wx.StaticBoxSizer(wx.StaticBox(self.dither_panel, wx.ID_ANY, _("Dither")), wx.VERTICAL)
        sizer_sharpen = wx.StaticBoxSizer(wx.StaticBox(self.sharpen_panel, wx.ID_ANY, _("Sharpen")), wx.VERTICAL)
        sizer_sharpen_threshold = wx.StaticBoxSizer(wx.StaticBox(self.sharpen_panel, wx.ID_ANY, _("Threshold")),
                                                    wx.HORIZONTAL)
        sizer_sharpen_radius = wx.StaticBoxSizer(wx.StaticBox(self.sharpen_panel, wx.ID_ANY, _("Radius")),
                                                 wx.HORIZONTAL)
        sizer_sharpen_percent = wx.StaticBoxSizer(wx.StaticBox(self.sharpen_panel, wx.ID_ANY, _("Percent")),
                                                  wx.HORIZONTAL)
        sizer_sharpen_main = wx.BoxSizer(wx.HORIZONTAL)
        sizer_gamma = wx.StaticBoxSizer(wx.StaticBox(self.gamma_panel, wx.ID_ANY, _("Gamma")), wx.VERTICAL)
        sizer_gamma_factor = wx.StaticBoxSizer(wx.StaticBox(self.gamma_panel, wx.ID_ANY, _("Gamma Factor")),
                                               wx.HORIZONTAL)
        sizer_gamma_main = wx.BoxSizer(wx.HORIZONTAL)
        sizer_tone = wx.StaticBoxSizer(wx.StaticBox(self.tone_curve_panel, wx.ID_ANY, _("Tone Curve")), wx.VERTICAL)
        sizer_tone_curve = wx.BoxSizer(wx.HORIZONTAL)
        sizer_grayscale = wx.StaticBoxSizer(wx.StaticBox(self.grayscale_panel, wx.ID_ANY, _("Grayscale")), wx.VERTICAL)
        sizer_resample = wx.StaticBoxSizer(wx.StaticBox(self.resample_panel, wx.ID_ANY, _("Resample")), wx.VERTICAL)
        sizer_resample_step = wx.BoxSizer(wx.HORIZONTAL)
        sizer_resample_height = wx.BoxSizer(wx.HORIZONTAL)
        sizer_resample_width = wx.BoxSizer(wx.HORIZONTAL)
        sizer_resample_main = wx.BoxSizer(wx.HORIZONTAL)
        sizer_crop = wx.StaticBoxSizer(wx.StaticBox(self.crop_panel, wx.ID_ANY, _("Crop")), wx.VERTICAL)
        sizer_crop_main = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.list_operation, 0, wx.EXPAND, 0)
        sizer_crop_main.Add(self.check_enable_crop, 0, 0, 0)
        sizer_crop_main.Add(self.button_reset_crop, 0, 0, 0)
        sizer_crop.Add(sizer_crop_main, 0, wx.EXPAND, 0)
        sizer_crop.Add(self.image_view_panel, 1, wx.EXPAND, 0)
        self.crop_panel.SetSizer(sizer_crop)
        sizer_operation_panels.Add(self.crop_panel, 1, wx.EXPAND, 0)
        sizer_resample_main.Add(self.check_enable_resample, 0, 0, 0)
        sizer_resample_main.Add(self.check_resample_maintain_aspect, 0, 0, 0)
        sizer_resample.Add(sizer_resample_main, 0, wx.EXPAND, 0)
        label_width = wx.StaticText(self.resample_panel, wx.ID_ANY, _("Width"))
        sizer_resample_width.Add(label_width, 1, 0, 0)
        sizer_resample_width.Add(self.text_resample_width, 1, 0, 0)
        sizer_resample_width.Add(self.spin_resample_width, 0, 0, 0)
        sizer_resample.Add(sizer_resample_width, 0, wx.EXPAND, 0)
        label_height = wx.StaticText(self.resample_panel, wx.ID_ANY, _("Height"))
        sizer_resample_height.Add(label_height, 1, 0, 0)
        sizer_resample_height.Add(self.text_resample_height, 1, 0, 0)
        sizer_resample_height.Add(self.spin_resample_height, 0, 0, 0)
        sizer_resample.Add(sizer_resample_height, 0, wx.EXPAND, 0)
        label_step = wx.StaticText(self.resample_panel, wx.ID_ANY, _("Step"))
        sizer_resample_step.Add(label_step, 1, 0, 0)
        sizer_resample_step.Add(self.combo_resample_step, 0, 0, 0)
        sizer_resample_step.Add(self.combo_resample_dpi, 0, 0, 0)
        sizer_resample.Add(sizer_resample_step, 0, wx.EXPAND, 0)
        self.resample_panel.SetSizer(sizer_resample)
        sizer_operation_panels.Add(self.resample_panel, 1, wx.EXPAND, 0)
        sizer_grayscale.Add(self.check_enable_grayscale, 0, 0, 0)
        self.grayscale_panel.SetSizer(sizer_grayscale)
        sizer_operation_panels.Add(self.grayscale_panel, 1, wx.EXPAND, 0)
        sizer_tone_curve.Add(self.check_enable_tone, 0, 0, 0)
        sizer_tone_curve.Add(self.button_reset_tone, 0, 0, 0)
        sizer_tone.Add(sizer_tone_curve, 0, wx.EXPAND, 0)
        sizer_tone.Add(self.curve_panel, 0, wx.EXPAND, 0)
        self.tone_curve_panel.SetSizer(sizer_tone)
        sizer_operation_panels.Add(self.tone_curve_panel, 1, wx.EXPAND, 0)
        sizer_gamma_main.Add(self.check_enable_gamma, 0, 0, 0)
        sizer_gamma_main.Add(self.button_reset_gamma, 0, 0, 0)
        sizer_gamma.Add(sizer_gamma_main, 0, wx.EXPAND, 0)
        sizer_gamma_factor.Add(self.slider_gamma_factor, 5, wx.EXPAND, 0)
        sizer_gamma_factor.Add(self.text_gamma_factor, 1, 0, 0)
        sizer_gamma.Add(sizer_gamma_factor, 0, wx.EXPAND, 0)
        self.gamma_panel.SetSizer(sizer_gamma)
        sizer_operation_panels.Add(self.gamma_panel, 1, wx.EXPAND, 0)
        sizer_sharpen_main.Add(self.check_enable_sharpen, 0, 0, 0)
        sizer_sharpen_main.Add(self.button_reset_sharpen, 0, 0, 0)
        sizer_sharpen.Add(sizer_sharpen_main, 0, wx.EXPAND, 0)
        sizer_sharpen_percent.Add(self.slider_sharpen_percent, 5, wx.EXPAND, 0)
        sizer_sharpen_percent.Add(self.text_sharpen_percent, 1, 0, 0)
        sizer_sharpen.Add(sizer_sharpen_percent, 0, wx.EXPAND, 0)
        sizer_sharpen_radius.Add(self.slider_sharpen_radius, 5, wx.EXPAND, 0)
        sizer_sharpen_radius.Add(self.text_sharpen_radius, 1, 0, 0)
        sizer_sharpen.Add(sizer_sharpen_radius, 0, wx.EXPAND, 0)
        sizer_sharpen_threshold.Add(self.slider_sharpen_threshold, 5, wx.EXPAND, 0)
        sizer_sharpen_threshold.Add(self.text_sharpen_threshold, 1, 0, 0)
        sizer_sharpen.Add(sizer_sharpen_threshold, 0, wx.EXPAND, 0)
        self.sharpen_panel.SetSizer(sizer_sharpen)
        sizer_operation_panels.Add(self.sharpen_panel, 1, wx.EXPAND, 0)
        sizer_dither_main.Add(self.check_enable_dither, 0, 0, 0)
        sizer_dither_main.Add(self.combo_dither, 0, 0, 0)
        self.dither_panel.SetSizer(sizer_dither_main)
        sizer_operation_panels.Add(self.dither_panel, 1, wx.EXPAND, 0)
        sizer_output.Add(self.button_output, 0, 0, 0)
        self.output_panel.SetSizer(sizer_output)
        sizer_operation_panels.Add(self.output_panel, 1, wx.EXPAND, 0)
        sizer_operation_panels.Add(self.panel_preview, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_operation_panels, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def on_list_operation(self, event):  # wxGlade: RasterWizard.<event_handler>
        self.hide_by_list_op()

    def on_check_enable_crop(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_check_enable_crop' not implemented!")
        event.Skip()

    def on_button_reset_crop(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_button_reset_crop' not implemented!")
        event.Skip()

    def on_check_enable_resample(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_check_enable_resample' not implemented!")
        event.Skip()

    def on_check_resample_maintain_aspect(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_check_resample_maintain_aspect' not implemented!")
        event.Skip()

    def on_text_resample_width(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_text_resample_width' not implemented!")
        event.Skip()

    def on_spin_resample_width(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_spin_resample_width' not implemented!")
        event.Skip()

    def on_text_resample_height(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_text_resample_height' not implemented!")
        event.Skip()

    def on_spin_resample_height(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_spin_resample_height' not implemented!")
        event.Skip()

    def on_check_enable_grayscale(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_check_enable_grayscale' not implemented!")
        event.Skip()

    def on_check_enable_tone(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_check_enable_tone' not implemented!")
        event.Skip()

    def on_button_reset_tone(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_button_reset_tone' not implemented!")
        event.Skip()

    def on_check_enable_gamma(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_check_enable_gamma' not implemented!")
        event.Skip()

    def on_button_reset_gamma(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_button_reset_gamma' not implemented!")
        event.Skip()

    def on_check_enable_sharpen(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_check_enable_sharpen' not implemented!")
        event.Skip()

    def on_button_reset_sharpen(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_button_reset_sharpen' not implemented!")
        event.Skip()

    def on_check_enable_dither(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_check_enable_dither' not implemented!")
        event.Skip()

    def on_button_update(self, event):  # wxGlade: RasterWizard.<event_handler>
        print("Event handler 'on_button_update' not implemented!")
        event.Skip()
