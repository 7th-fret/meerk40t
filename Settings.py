# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 0.9.3 on Thu Jun 27 21:45:40 2019
#

import wx

_ = wx.GetTranslation


# begin wxGlade: dependencies
# end wxGlade

class Settings(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Preferences.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.FRAME_TOOL_WINDOW | wx.STAY_ON_TOP
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((491, 223))
        self.radio_units = wx.RadioBox(self, wx.ID_ANY, _("Units"),
                                       choices=[_("mm"), _("cm"), _("inch"), _("mils")],
                                       majorDimension=1,
                                       style=wx.RA_SPECIFY_ROWS)
        self.check_invert_mouse_zoom = wx.CheckBox(self, wx.ID_ANY, _("Invert Mouse Wheel Zoom"))
        self.combo_language = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBOX, self.on_radio_units, self.radio_units)
        self.Bind(wx.EVT_CHECKBOX, self.on_invert_mouse_wheel, self.check_invert_mouse_zoom)
        self.Bind(wx.EVT_COMBOBOX, self.on_combo_language, self.combo_language)
        # end wxGlade
        self.kernel = None
        self.Bind(wx.EVT_CLOSE, self.on_close, self)

    def on_close(self, event):
        self.kernel.mark_window_closed("Settings")
        event.Skip()  # Call destroy.

    def set_kernel(self, kernel):
        self.kernel = kernel
        kernel.setting(bool, "mouse_zoom_invert", False)
        kernel.setting(bool, "language", 0)
        kernel.setting(str, "units_name", 'mm')
        kernel.setting(int, "units_marks", 10)
        kernel.setting(int, "units_index", 0)
        self.check_invert_mouse_zoom.SetValue(self.kernel.mouse_zoom_invert)
        self.radio_units.SetSelection(self.kernel.units_index)
        self.combo_language.SetSelection(self.kernel.language)

    def __set_properties(self):
        # begin wxGlade: Preferences.__set_properties
        self.SetTitle(_("Preferences"))
        self.radio_units.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.radio_units.SetToolTip(_("Set default units for guides"))
        self.check_invert_mouse_zoom.SetToolTip(_("Invert the mouse wheel zoom direction"))
        self.combo_language.SetToolTip(_("Select the desired language to use."))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Preferences.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, _("Language")), wx.HORIZONTAL)
        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, _("Mouse Settings")), wx.HORIZONTAL)
        sizer_1.Add(self.radio_units, 0, wx.EXPAND, 0)
        sizer_3.Add(self.check_invert_mouse_zoom, 0, 0, 0)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add(self.combo_language, 0, 0, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def on_invert_mouse_wheel(self, event):  # wxGlade: Preferences.<event_handler>
        self.kernel.mouse_zoom_invert = self.check_invert_mouse_zoom.GetValue()

    def on_combo_language(self, event):  # wxGlade: Preferences.<event_handler>
        print("Event handler 'on_combo_language' not implemented!")
        event.Skip()

    def on_radio_units(self, event):  # wxGlade: Preferences.<event_handler>
        if event.Int == 0:
            self.set_mm()
        elif event.Int == 1:
            self.set_cm()
        elif event.Int == 2:
            self.set_inch()
        elif event.Int == 3:
            self.set_mil()

    def set_inch(self):
        p = self.kernel
        p.units_convert, p.units_name, p.units_marks, p.units_index = (1000.0, "inch", 1, 2)
        p("units", 0)

    def set_mil(self):
        p = self.kernel
        p.units_convert, p.units_name, p.units_marks, p.units_index = (1.0, "mil", 1000, 3)
        p("units", 0)

    def set_cm(self):
        p = self.kernel
        p.units_convert, p.units_name, p.units_marks, p.units_index = (393.7, "cm", 1, 1)
        p("units", 0)

    def set_mm(self):
        p = self.kernel
        p.units_convert, p.units_name, p.units_marks, p.units_index = (39.37, "mm", 10, 0)
        p("units", 0)
