# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 0.9.3 on Fri Jun 28 16:25:14 2019
#

import wx

from CH341DriverBase import *
from Kernel import *
from icons import *

_ = wx.GetTranslation


class UsbRetry(wx.Frame, Module):
    def __init__(self, parent, *args, **kwds):
        # begin wxGlade: UsbRetry.__init__
        wx.Frame.__init__(self, parent, -1, "",
                          style=wx.DEFAULT_FRAME_STYLE | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)
        Module.__init__(self)
        self.SetSize((573, 397))
        self.text_usb_attempt = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.button_usb_retry = wx.Button(self, wx.ID_ANY, "Stop Retrying")
        self.button_connection = wx.Button(self, wx.ID_ANY, "Connection")
        self.text_usb_log = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Reset", "Reset the Usb Connection")
        self.Bind(wx.EVT_MENU, self.on_usb_reset, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Release", "Releases the USB Connection")
        self.Bind(wx.EVT_MENU, self.on_usb_release, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Usb")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Pause", "Pauses running project")
        self.Bind(wx.EVT_MENU, self.on_project_pause, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Emergency Stop", "Emergency stop project")
        self.Bind(wx.EVT_MENU, self.on_project_stop, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Project")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.usb_statusbar = self.CreateStatusBar(1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_button_usb_retry, self.button_usb_retry)
        self.Bind(wx.EVT_BUTTON, self.on_button_connection, self.button_connection)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.on_close, self)

        # OSX Window close
        if parent is not None:
            parent.accelerator_table(self)

    def __set_properties(self):
        # begin wxGlade: UsbRetry.__set_properties
        self.SetTitle("Usb Retrying...")
        self.button_usb_retry.SetMinSize((-1, 30))
        self.button_usb_retry.SetBackgroundColour(wx.Colour(142, 35, 35))
        self.button_connection.SetBackgroundColour(wx.Colour(127, 255, 0))
        self.button_connection.SetFont(
            wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.button_connection.SetBitmap(icons8_disconnected_50.GetBitmap())
        self.usb_statusbar.SetStatusWidths([-1])

        # statusbar fields
        usb_statusbar_fields = ["Usb Status: None"]
        for i in range(len(usb_statusbar_fields)):
            self.usb_statusbar.SetStatusText(usb_statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: UsbRetry.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, "Attempt:")
        sizer_3.Add(label_1, 0, 0, 0)
        sizer_3.Add(self.text_usb_attempt, 0, 0, 0)
        sizer_3.Add(self.button_usb_retry, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_1.Add(self.button_connection, 1, wx.EXPAND, 0)
        sizer_1.Add(self.text_usb_log, 6, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def on_close(self, event):
        if self.state == 5:
            event.Veto()
        else:
            self.state = 5
            self.device.close('window', self.name)
            event.Skip()  # Call destroy as regular.

    def initialize(self, channel=None):
        self.device.close('window', self.name)
        self.Show()

        self.device.listen('pipe;usb_state', self.on_connection_state_change)

    def finalize(self, channel=None):
        self.device.unlisten('pipe;usb_state', self.on_connection_state_change)
        try:
            self.Close()
        except RuntimeError:
            pass

    def shutdown(self, channel=None):
        try:
            self.Close()
        except RuntimeError:
            pass

    def on_connection_state_change(self, state):
        status = get_name_for_status(state, translation=_)
        if state == STATE_CONNECTION_FAILED or state == STATE_DRIVER_NO_BACKEND:
            self.button_connection.SetBackgroundColour("#dfdf00")
            self.button_connection.SetLabel(status)
            self.button_connection.SetBitmap(icons8_disconnected_50.GetBitmap())
            self.button_connection.Enable()
        elif state == STATE_UNINITIALIZED or state == STATE_USB_DISCONNECTED:
            self.button_connection.SetBackgroundColour("#ffff00")
            self.button_connection.SetLabel(_("Connect"))
            self.button_connection.SetBitmap(icons8_connected_50.GetBitmap())
            self.button_connection.Enable()
        elif state == STATE_USB_SET_DISCONNECTING:
            self.button_connection.SetBackgroundColour("#ffff00")
            self.button_connection.SetLabel(_("Disconnecting..."))
            self.button_connection.SetBitmap(icons8_disconnected_50.GetBitmap())
            self.button_connection.Disable()
        elif state == STATE_USB_CONNECTED or state == STATE_CONNECTED:
            self.button_connection.SetBackgroundColour("#00ff00")
            self.button_connection.SetLabel(_("Disconnect"))
            self.button_connection.SetBitmap(icons8_connected_50.GetBitmap())
            self.button_connection.Enable()
        elif status == STATE_CONNECTING:
            self.button_connection.SetBackgroundColour("#ffff00")
            self.button_connection.SetLabel(_("Connecting..."))
            self.button_connection.SetBitmap(icons8_connected_50.GetBitmap())
            self.button_connection.Disable()

    def on_button_usb_retry(self, event):  # wxGlade: UsbRetry.<event_handler>
        pass

    def on_button_connection(self, event):  # wxGlade: UsbRetry.<event_handler>
        state = self.device.last_signal('pipe;usb_state')
        if state is not None and isinstance(state, tuple):
            state = state[0]
        if state in (STATE_USB_DISCONNECTED, STATE_UNINITIALIZED, STATE_CONNECTION_FAILED, STATE_DRIVER_MOCK, None):
            try:
                self.device.execute("Connect_USB")
            except ConnectionRefusedError:
                dlg = wx.MessageDialog(None, _("Connection Refused. See USB Log for detailed information."),
                                       _("Manual Connection"), wx.OK | wx.ICON_WARNING)
                result = dlg.ShowModal()
                dlg.Destroy()
        elif state in (STATE_CONNECTED, STATE_USB_CONNECTED):
            self.device.execute("Disconnect_USB")

    def on_usb_reset(self, event):  # wxGlade: UsbRetry.<event_handler>
        print("Event handler 'on_usb_reset' not implemented!")
        event.Skip()

    def on_usb_release(self, event):  # wxGlade: UsbRetry.<event_handler>
        print("Event handler 'on_usb_release' not implemented!")
        event.Skip()

    def on_project_pause(self, event):  # wxGlade: UsbRetry.<event_handler>
        try:
            self.device.execute("Realtime Pause_Resume")
        except AttributeError:
            pass

    def on_project_stop(self, event):  # wxGlade: UsbRetry.<event_handler>
        try:
            self.device.interpreter.realtime_command(REALTIME_RESET)
        except AttributeError:
            pass


