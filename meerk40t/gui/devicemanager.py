#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.3 on Sat Feb  1 06:42:01 2020
#

import wx

from .icons import (
    icons8_plus_50,
    icons8_trash_50,
)
from .mwindow import MWindow

_ = wx.GetTranslation


class DeviceManager(MWindow):
    def __init__(self, *args, **kwds):
        super().__init__(653, 332, *args, **kwds)
        self.devices_list = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.new_device_button = wx.BitmapButton(self, wx.ID_ANY, icons8_plus_50.GetBitmap())
        self.remove_device_button = wx.BitmapButton(self, wx.ID_ANY, icons8_trash_50.GetBitmap())

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LIST_BEGIN_DRAG, self.on_list_drag, self.devices_list)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.on_list_item_activated, self.devices_list)
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.on_list_right_click, self.devices_list)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_list_item_selected, self.devices_list)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.on_list_item_selected, self.devices_list)
        self.Bind(wx.EVT_BUTTON, self.on_button_new, self.new_device_button)
        self.Bind(wx.EVT_BUTTON, self.on_button_remove, self.remove_device_button)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: DeviceManager.__set_properties
        self.SetTitle("Device Manager")
        self.devices_list.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.devices_list.AppendColumn("Index", format=wx.LIST_FORMAT_LEFT, width=56)
        self.devices_list.AppendColumn("Spooler", format=wx.LIST_FORMAT_LEFT, width=74)
        self.devices_list.AppendColumn("Driver/Input", format=wx.LIST_FORMAT_LEFT, width=170)
        self.devices_list.AppendColumn("Output", format=wx.LIST_FORMAT_LEFT, width=170)
        self.devices_list.AppendColumn("Registered", format=wx.LIST_FORMAT_LEFT, width=93)
        self.new_device_button.SetToolTip("Add a new device")
        self.new_device_button.SetSize(self.new_device_button.GetBestSize())
        self.remove_device_button.SetToolTip("Remove selected device")
        self.remove_device_button.SetSize(self.remove_device_button.GetBestSize())
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DeviceManager.__do_layout
        main_sizer = wx.BoxSizer(wx.HORIZONTAL)
        button_sizer = wx.BoxSizer(wx.VERTICAL)
        main_sizer.Add(self.devices_list, 0, wx.EXPAND, 0)
        button_sizer.Add(self.new_device_button, 0, 0, 0)
        button_sizer.Add(self.remove_device_button, 0, 0, 0)
        main_sizer.Add(button_sizer, 0, wx.EXPAND, 0)
        self.new_device_button.Enable(False)
        self.remove_device_button.Enable(False)
        self.SetSizer(main_sizer)
        self.Layout()
        # end wxGlade

    def window_open(self):
        self.context.setting(str, "list_devices", "")
        self.refresh_device_list()

    def window_close(self):
        item = self.devices_list.GetFirstSelected()
        if item != -1:
            uid = self.devices_list.GetItem(item).Text
            self.context.device_primary = uid

    def refresh_device_list(self):
        self.devices_list.DeleteAllItems()
        for i, s in enumerate(self.context.spoolers._spoolers):
            spooler = self.context.spoolers._spoolers[s][0]
            m = self.devices_list.InsertItem(i, str(i))
            driver = None
            output = None
            registered = True
            if spooler is not None and spooler.next is not None:
                driver = spooler.next
            if driver is not None and driver.next is not None:
                output = driver.next
            if m != -1:
                self.devices_list.SetItem(m, 1, str(spooler))
                self.devices_list.SetItem(m, 2, str(driver))
                self.devices_list.SetItem(m, 3, str(output))
                self.devices_list.SetItem(m, 4, str(registered))

    def on_list_drag(self, event):  # wxGlade: DeviceManager.<event_handler>
        pass

    def on_list_right_click(self, event):  # wxGlade: DeviceManager.<event_handler>
        uid = event.GetLabel()
        print(uid)
        self.refresh_device_list()

    def on_list_item_selected(self, event=None):
        item = self.devices_list.GetFirstSelected()
        self.new_device_button.Enable(item != -1)
        self.remove_device_button.Enable(item != -1)

    def on_list_item_activated(self, event=None):  # wxGlade: DeviceManager.<event_handler>
        item = self.devices_list.GetFirstSelected()
        if item == -1:
            return
        uid = self.devices_list.GetItem(item).Text
        self.context("activate %s\n" % uid)

    def on_button_new(self, event):  # wxGlade: DeviceManager.<event_handler>
        item = self.devices_list.GetFirstSelected()
        if item == -1:
            return
        spooler_input = self.devices_list.GetItem(item).Text
        names = [name for name in self.context._kernel.match("driver", suffix=True)]
        dlg = wx.SingleChoiceDialog(
            None, _("What type of driver is being added?"), _("Device Type"), names
        )
        dlg.SetSelection(0)
        if dlg.ShowModal() == wx.ID_OK:
            device_type = names[dlg.GetSelection()]
        else:
            dlg.Destroy()
            return
        dlg.Destroy()

        names = [name for name in self.context._kernel.match("pipe", suffix=True)]
        dlg = wx.SingleChoiceDialog(
            None, _("Where does the device output data?"), _("Output Type"), names
        )
        dlg.SetSelection(0)
        if dlg.ShowModal() == wx.ID_OK:
            pipe_type = names[dlg.GetSelection()]
        else:
            dlg.Destroy()
            return
        dlg.Destroy()

        if pipe_type == 'file':
            dlg.Destroy()
            dlg = wx.TextEntryDialog(
                None, _("What filename does this device output to?"), _("Output"),
            )
            if dlg.ShowModal() == wx.ID_OK:
                filename = dlg.GetValue()
            else:
                dlg.Destroy()
                return
            dev = "spool%s driver -n %s outfile %s\n" % (spooler_input, device_type, filename)
            self.context("device add %s\n%s\n" % (dev, dev))
            dlg.Destroy()
            return

        if pipe_type == 'network':
            dlg.Destroy()
            dlg = wx.TextEntryDialog(
                None, _("What network address does this device output to?"), _("Output"),
            )
            if dlg.ShowModal() == wx.ID_OK:
                network = dlg.GetValue()
            else:
                dlg.Destroy()
                return
            dev = "spool%s driver -n %s network %s\n" % (spooler_input, device_type, network)
            self.context("device add %s\n%s\n" % (dev, dev))
            dlg.Destroy()
            return

        dev = "spool%s driver -n %s pipe -n %s\n" % (spooler_input, device_type, pipe_type)
        self.context("device add %s\n%s\n" % (dev,dev))
        self.refresh_device_list()
        self.context.get_context('devices').flush()

    def on_button_remove(self, event):  # wxGlade: DeviceManager.<event_handler>
        item = self.devices_list.GetFirstSelected()
        if item == -1:
            return
        uid = self.devices_list.GetItem(item).Text
        self.refresh_device_list()
